namespace Prelude.Tests.Rulesets

open NUnit.Framework
open Prelude
open Percyqaz.Common
open Prelude.Formats
open Prelude.Formats.Osu
open Prelude.Data.OsuClientInterop
open Prelude.Gameplay.Replays
open Prelude.Gameplay.Rulesets
open Prelude.Gameplay.Scoring
open Prelude.Tests.Rulesets

module OsuParity =

    let RULESET = OsuMania.create 8.0f OsuMania.NoMod

    let TEST_REPLAY_FILE =
        OsuReplay.TryReadFile "./Data/Lylcaruis - Cardboard Box - He He He [SPEEEDDD!!!] (2023-09-29) OsuMania.osr" |> Option.get
    let TEST_OSU_FILE_HASH =
        Beatmap.HashFromFile "./Data/Cardboard Box - He He He (DannyPX) [SPEEEDDD!!!].osu" |> expect
    let TEST_OSU_FILE =
        Beatmap.FromFile "./Data/Cardboard Box - He He He (DannyPX) [SPEEEDDD!!!].osu" |> expect
    let TEST_CHART =
        (Osu_To_Interlude.convert TEST_OSU_FILE { Config = ConversionOptions.Pack("osu!", None, LinkAssetFiles); Source = "./Data/Cardboard Box - He He He (DannyPX) [SPEEEDDD!!!].osu" } |> expect).Chart

    let TEST_REPLAY_FILE_2 =
        OsuReplay.TryReadFile "./Data/Percyqaz - Hachi - DONUT HOLE [Filling] (2024-09-30) OsuMania.osr" |> Option.get
    let TEST_OSU_FILE_HASH_2 =
        Beatmap.HashFromFile "./Data/Hachi - DONUT HOLE (Raveille) [Filling].osu" |> expect
    let TEST_OSU_FILE_2 =
        Beatmap.FromFile "./Data/Hachi - DONUT HOLE (Raveille) [Filling].osu" |> expect
    let TEST_CHART_2 =
        (Osu_To_Interlude.convert TEST_OSU_FILE_2 { Config = ConversionOptions.Pack("osu!", None, LinkAssetFiles); Source = "./Data/Hachi - DONUT HOLE (Raveille) [Filling].osu" } |> expect).Chart

    [<Test>]
    let Replay_MatchesTestFile_1 () =
        Assert.AreEqual(TEST_OSU_FILE_HASH, TEST_REPLAY_FILE.BeatmapHash)

    [<Test>]
    let Replay_MatchesTestFile_2 () =
        Assert.AreEqual(TEST_OSU_FILE_HASH_2, TEST_REPLAY_FILE_2.BeatmapHash)

    [<Test>]
    let Replay_RoundTrip() =
        let as_interlude_replay = OsuReplay.decode (TEST_REPLAY_FILE, TEST_CHART.FirstNote, 1.0f<rate>)

        let back_as_osu_replay = OsuReplay.encode as_interlude_replay TEST_CHART.FirstNote Mods.None TEST_OSU_FILE_HASH
        let return_as_interlude_replay = OsuReplay.decode (back_as_osu_replay, TEST_CHART.FirstNote, 1.0f<rate>)

        Assert.AreEqual(as_interlude_replay, return_as_interlude_replay)

    [<Test>]
    let OsuRuleset_MatchesReplayJudgements_HeHeHeSample () =
        let as_interlude_replay = OsuReplay.decode (TEST_REPLAY_FILE, TEST_CHART.FirstNote, 1.0f<rate>)

        let as_interlude_ruleset = OsuMania.create (float32 TEST_OSU_FILE.Difficulty.OverallDifficulty) OsuMania.NoMod

        let score = ScoreProcessor.run as_interlude_ruleset TEST_CHART.Keys (StoredReplay(as_interlude_replay)) TEST_CHART.Notes 1.0f<rate>

        Assert.AreEqual(
            (
                TEST_REPLAY_FILE.CountGeki,
                TEST_REPLAY_FILE.Count300,
                TEST_REPLAY_FILE.CountKatu,
                TEST_REPLAY_FILE.Count100,
                TEST_REPLAY_FILE.Count50,
                TEST_REPLAY_FILE.CountMiss
            ),
            (
                score.JudgementCounts.[0],
                score.JudgementCounts.[1],
                score.JudgementCounts.[2],
                score.JudgementCounts.[3],
                score.JudgementCounts.[4],
                score.JudgementCounts.[5]
            )
        )

    [<Test>]
    let OsuRuleset_MatchesExpectedAccuracy_HeHeHeSample () =
        let as_interlude_replay = OsuReplay.decode (TEST_REPLAY_FILE, TEST_CHART.FirstNote, 1.0f<rate>)
        let as_interlude_ruleset = OsuMania.create (float32 TEST_OSU_FILE.Difficulty.OverallDifficulty) OsuMania.NoMod
        let score = ScoreProcessor.run as_interlude_ruleset TEST_CHART.Keys (StoredReplay(as_interlude_replay)) TEST_CHART.Notes 1.0f<rate>

        printfn "%.2f%%" (score.Accuracy * 100.0)

        Assert.AreEqual(92.15, System.Math.Round(100.0 * score.Accuracy, 2))

    [<Test>]
    let OsuRuleset_MatchesGosuMemoryDeltas_HeHeHeSample () =
        let as_interlude_replay = OsuReplay.decode (TEST_REPLAY_FILE, TEST_CHART.FirstNote, 1.0f<rate>)

        let as_interlude_ruleset = OsuMania.create (float32 TEST_OSU_FILE.Difficulty.OverallDifficulty) OsuMania.NoMod

        let score = ScoreProcessor(as_interlude_ruleset, TEST_CHART.Keys, (StoredReplay(as_interlude_replay)), TEST_CHART.Notes, 1.0f<rate>)
        score.Update Time.infinity

        let event_deltas =
            score.Events
            |> Seq.map (_.Action)
            |> Seq.choose (
                function
                | Hit d -> if not d.Missed then Some d.Delta else None
                | Hold d -> if not d.Missed then Some d.Delta else None
                | Release d -> if not d.Missed then Some d.Delta else None
                | _ -> None
            )
            |> Seq.map (float32 >> int)

        // Obtained with GosuMemory
        let EXPECTED_DATA =
            [13; -1; 1; -2; 7; -14; -9; -5; 2; 1; 0; 2; -5; -2; 2; 6; -12; 6; -11; 3; -3; -8; -4; -13; -12; -2; -13; 0; -14; 4; -4; -4; -3; 0; -10; -9; -7; -7; -9; -13; -7; -12; -17; -8; -3; 3; 0; 8; -12; 4; 6; -3; -4; -2; 2; -5; -5; 0; 3; 2; -8; 9; -9; 4; 5; 3; 7; -4; -4; -1; -9; 3; -2; 6; 0; 3; -3; -10; 8; -3; 4; -1; 3; 10; 3; -1; 4; 5; 5; 7; -5; -14; -13; -1; -14; -4; 0; -5; -5; 3; -4; 2; -1; -5; -17; -4; -9; -18; -14; -2; -6; -37; 1; 2; 6; -16; 3; 14; 3; 11; -14; 0; 5; -5; 0; -15; -7; -4; -1; 0; 17; -13; -12; -3; -3; -19; -5; 16; 5; -5; -4; 1; -13; -56; -7; -5; -4; -10; -13; -7; -6; 7; -6; -8; 3; 5; 8; -15; 6; 3; -4; -3; 8; -31; -26; -2; -14; -2; -1; 2; 12; -6; 4; 12; 12; -14; -19; -14; -8; -1; 0; -3; 4; 10; 2; -14; 1; 2; -5; -3; -8; -6; 13; 22; 11; -32; 5; 12; -12; -23; -4; -4; -6; 27; -4; 5; -18; -13; -4; -10; -7; -14; -10; -15; -1; 10; -16; -13; -9; -10; -11; -10; -2; -9; 5; -11; -6; -2; -20; -10; 1; -4; -25; -4; -28; -4; -1; 17; -11; -21; -9; -40; -18; -2; 11; -4; -9; -3; 0; 0; 2; 16; -12; -9; -13; -4; -6; -3; 4; 9; 19; 67; -9; 17; -10; 0; 3; -10; -17; 39; -13; 19; 5; 13; 3; -21; -3; 2; 5; 5; 12; 1; 26; -4; 23; -11; -7; -1; -2; -11; 1; 2; -3; -27; -10; -17; 1; -28; -33; -13; 1; 0; -7; -22; -3; 14; -17; -1; 18; -20; 13; -16; -10; 8; 44; -1; 22; -4; -2; 12; -3; 0; -15; 2; 9; 10; -4; -8; -19; 3; 6; 8; -6; 4; -19; 11; -11; -10; 8; -5; 1; 4; -24; 3; 14; 15; -5; 2; 10; -19; -7; -29; -13; -13; -10; -12; -7; -23; -22; -22; -4; -18; -17; -22; -13; -10; -5; 0; -4; 2; 1; 25; -8; -1; 9; -13; -21; -5; 17; -20; -4; 6; -17; 0; -18; -21; -6; -1; -13; -8; -12; -11; -23; -10; -46; -14; 17; 8; -19; 20; 12; 20; 2; 34; 5; -8; 23; 6; 41; -11; 26; -1; 34; 15; 21; 26; 34; 1; -5; -27; 19; -6; 1; -18; -11; 27; -10; -8; -4; 9; -5; 2; 5; 9; -16; 2; -1; 5; 3; 5; 9; -11; 15; -10; -11; -6; -7; -19; 3; -50; 12; -38; -35; -4; -20; -25; -3; -9; 10; 4; -4; 12; -7; 26; 0; 24; -21; -6; -18; 16; -21; -13; 33; -26; -17; -19; -40; 6; -33; 16; -3; -37; -27; 12; -12; -42; -41; -3; -30; 6; -26; 13; 15; -15; 9; 15; -11; 39; 2; 27; 2; 53; 33; 8; -4; 42; 5; -28; -6; 1; -40; 1; -12; 2; -10; 44; 29; -10; 26; -7; -17; 18; 14; 14; 11; 61; 4; 3; 56; 2; 3; 47; 15; -4; -3; 34; -27; 25; -48; -35; -23; 29; 3; 55; -6; 0; 6; 59; -38; 11; -30; 18; -4; -37; 7; -13; 41; 3; -12; 2; -5; 36; -52; -4; -46; 1; -51; 0; 0; -33; -51; 2; -32; -37; 12; -34; 16; -36; -63; -17; -16; -18; -49; -4; -42; -26; 0; 3; -28; 18; 9; 10; -57; 32; 52; -34; -30; 54; 21; 52; 15; -25; -14; 8; -28; 53; 2; 43; -19; 10; 25; -14; -26; 21; -36; 99; 31; 75; 3; -33; 14; 55; -56; -43; -65; 15; 57; -81; 6; -68; -22; -5; -75; -19; -71; -54; -11; -121; -35; 34; -37; -149; 55; 17; -17; -44; 43; 4; -30; -47; 2; 42; 22; 12; -58; 35; 45; 6; -51; 29; 34; 10; -50; 19; 12; -91; 0; 2; 47; -143; -6; -82; 47; -7; -77; 49; -60; -6; -125; 5; -104; 5; 36; -15; 40; 17; -19; -17; 19; 17; -18; 12; -48; 16; 44; 40; 16; 41; -52; 30; 71; 30; -78; 67; 28; 27; -34; 70; 4; -4; -23; -5; 5; -9; -24; 6; 10; -17; -49; 9; -15; -28; -50; 27; -8; -32; -99; 29; -23; -10; 2; 2; -20; -2; -34; -31; -54; 9; -22; -50; -8; -9; -28; 25; 8; -12; 18; -8; -10; -46; -8; 5; -21; 19; 0; -31; -2; 6; 16; 17; -5; 3; 13; 25; 44; 45; 30; 79; 24; 29; 23; 75; 17; 21; 68; 39; 15; 59; 28; -3; -2; 52; 18; -13; 35; 14; -24; 25; 82; 7; -32; 14; -58; 2; -72; 58; -4; -39; -70; 0; -30; -58; -11; 7; -51; -6; 0; -29; -21; -10; 34; -15; 27; 7; -24; -20; -2; 41; -23; -17; 25; 8; -26; -57; 24; 6; 60; -2; 39; -38; -62; 28; -12; 69; 25; -13; -40; -29; -8; 32; -31; -100; 19; -14; -74; -1; 45; 3; -33; 16; -19; 0; -12; -41; -28; -5; -80; -32; 18; 5; 0; -20; 13; -61; 10; -67; 56; 10; -56; 29; -89; 6; -111; 22; 47; -8; 8; -56; 26; -53; -51; 1; 48; -57; -3; 39; -33; -11; 30; -73; -28; -44; 11; -7; -42; -69; 12; 4; -105; 16; -8; 16; 66; -131; -42; 2; -40; 39; 8; 38; 2; -28; -8; 41; 14; 6; 45; 13; 6; -22; 14; 35; 17; -3; 31; -2; 16; -9; -13; -4; 2; -15; 12; -4; -30; -49; -7; -19; -39; -18; -21; -10; -6; -20; 6; -5; -12; -1; -2; -46; -10; -23; -16; 16; -2; -4; 16; 32; 9; 18; 17; -18; -14; -18; 17; -19; 4; 16; 11; -18; -2; 4; 1; 13; -1; -1; 19; -14; 7; -6; -10; 3; 0; 6; -7; -9; -1; -9; -15; -15; -9; -4; -1; -15; 3; -10; 2; -38; -3; -13; -14; 1; -35; 9; -27; -31; 27; -18; -29; -23; -19; -11; 12; -17; 0; -12; 14; 25; -13; -9; -1; 0; 18; 3; 21; -16; -7; 1; -5; -14; -18; -14; -13; -4; -18; -15; -6; -4; -29; -4; 4; 6; 0; 14; -21; -25; 9; 7; -8; 0; -16; 4; -1; 12; 18; -28; 4; -13; -3; -23; -8; 3; -11; 6; -4; 7; -42; -11; -15; -30; 0; -20; -65; 8; -27; 20; -14; 5; 9; -53; -2; -2; -9; 1; 11; -15; -7; -4; -3; -9; -20; 2; -1; -10; -20; -7; -27; 0; 0; -5; 9; 9; 12; -4; -6; -6; 5; -17; -11; 1; -13; -12; 9; 14; -11; -11; 8; 6; -10; -1; -1; -2; 0; -57; 3; 0; 12; 0; 0; 8; 17; -35; -7; -1; 2; -13; -4; -20; -9; -6; 19; -9; -3; -16; -10; -7; -12; -18; -6; 3; -5; -8; -1; -58; -4; 3; -3; -1; -3; -1; -58; 4; -7; -16; -16; -13; 1; -31; -8; -7; 24; -1; 4; -6; 1; -8; -4; -25; -7; -3; -14; -4; -11; -10; -7; -13; 0; -14; -1; 17; 3; -28; 0; -19; -14; -6; -5; 1; -21; -16; 5; -15; -4; -13; -9; -11; -10; -18; -2; -1; -6; -1; -34; -45; -4; -12; -6; -11; -28; -19; -13; -21; -11; -18; 3; -27; 6; -14; -3; 5; -7; -3; -6; -10; -8; -9; -19; -14; -13; -8; -17; -11; -7; -10; 5; -17; 43; 22; -15; -11; -4; -18; -12; -11; -3; 3; -6; 17; -14; 3; -15; -22; -21; -22; -19; -1; -20; -17; -34; -31; -14; -36; -13; -39; 12; -40; 8; -1; 8; 10; -25; 1; -16; -29; -2; -1; 73; -29; 3; -15; -18; -10; -13; 3; -24; -1; -13; -19; 2; -26; -14; -17; -18; -9; -22; -11; -13; -7; -4; -19; -6; -30; -8; -5; -4; 1; -6; -7; -3; -27; -16; -25; -18; -17; -5; -20; -4; -15; -8; 27; -17; 2; -25; -18; 6; -26; 3; -14; 4; -28; -4; -29; -12; -7; -33; -6; -17; -12; -5; -7; 5; -7; -16; -5; 31; -11; 30; -12; 0; -18; -14; -22; -15; -9; -35; 13; -27; -17; -7; -3; -12; -9; -17; -15; -19; -14; 0; -5; 1; -25; -9; -11; -18; -2; 3; -14; -15; -17; -14; -34; -15; -24; -14; -5; 5; -4; -1; -19; -11; -5; -7; -14; -5; 17; -10; -9; -7; -17; -6; -6; -16; -11; -12; -11; -3; 2; -10; -18; -10; -4; -9; 9; -33; -12; 17; -10; 22; -4; 6; -1; 4; -4; -1; 7; 0; -9; 6; -21; -15; 7; -11; -2; -8; -46; 23; 7; 14; -14; 4; 6; -9; -2; -23; -6; -29; 11; -21; -11; 3; -21; 2; -14; -36; -13; 4; -12; 8; -17; 8; 35; -10; 15; -16; -10; 23; -22; 23; -16; 16; -13; 6; -18; 3; 8; -28; -4; -25; 10; 19; -16; 7; -9; -25; -9; 45; -11; 40; -15; -10; -21; 42; 27; -9; 5; 7; -17; -6; -23; -18; -18; -17; -16; -21; 0; -28; -2; -33; 28; -19; -36; -31; 12; -45; 4; -34; 6; -26; 10; -35; -5; -28; 10; -26; 15; -23; 15; -18; 17; 8; 14; -9; 31; 6; 17; -2; 48; -12; 32; 34; -30; 13; -38; 12; 52; 14; 35; -39; 9; 19; -14; -40; 7; 23; -9; -39; -111; 10; 12; 30; 1; -140; -12; 19; -15; -15; -19; 23; -53; 15; 60; -3; 36; -12; 32; 13; 20; 28; 2; 8; 11; 26; 0; 10; -22; -18; -46; -20; 20; -17; -86; 25; -8; 22; 25; 30; 7; 26; -11; -3; -32; -1; 38; -25; 25; 8; -19; 34; 26; -5; 22; -17; -9; -43; 2; 15; 21; -17; 17; -14; -33; 19; 31; -28; 12; 9; 12; 23; -2; 42; -17; -13; 29; 77; 16; -20; -8; 72; 55; -18; 33; -39; 41; -38; 15; 40; -36; 11; 19; -10; -47; -43; 9; -49; -8; 28; -4; 37; 40; 29; -5; -47; 37; 27; -45; 36; 5; 52; 35; -42; 6; 23; 24; 7; -25; 10; 14; -19; 1; 5; -36; 16; -14; -1; 19; 20; -15; -4; 19; 27; 31; 46; 13; 17; 23; 38; 3; 15; 24; -10; 8; 13; -37; 15; -1; 0; -70; -3; 49; -128; -6; -7; 50; -126; -3; 2; 9; 34; -151; -7; -65; 38; 7; -93; 31; 43; -141; 23; 43; 50; 53; 34; -30; 33; -75; 32; -74; 17; -93; 60; -127; -70; 15; 50; -30; -68; -4; 7; 4; -36; -1; -1; -22; 20; -41; 10; -49; -8; 8; -25; -8; -2; 20; -19; -20; 1; -24; 19; -53; -7; -15; -33; 14; 80; -16; -32; 13; -17; -17; 22; -35; 5; -7; -34; -14; -12; 3; -24; 4; -34; -13; 9; 14; -14; 35; 4; 10; -53; 46; 45; -20; -38; -28; -57; 30; 19; -99; -11; -7; 64; -7; -86; 52; -102; -19; -4; 50; -139; -13; 48; -17; 27; 29; 17; -9; 11; 15; 35; 39; 9; 58; 23; -45; -36; 55; 37; -33; -31; 53; 14; -24; -21; -10; 21; -15; -44; -62; -19; 22; -33; 8; -22; -41; -37; 25; -26; 16; 11; -60; -3; 54; -50; -5; 46; 57; -54; 34; -2; 21; -7; -29; -29; 14; -15; -18; -96; 22; -51; 11; -61; 25; -86; 26; -90; -7; -113; 40; -150; 41; 33; 37; -20; -106; 14; 38; -152; 47; 34; -26; 41; 77; -59; 27; 77; -110; 12; -26; 83; 48; -30; -149; 80; 52; -9; 34; -8; -7; 33; 10; -5; -3; 42; 13; 7; -30; 4; -27; 16; -23; 7; -62; 22; 10; -81; 9; 12; 55; -134; 5; -31; 33; -75; -19; 21; -12; -72; -14; 3; 7; -105; -17; 42; -16; -26; -15; -7; 28; -8; -19; 44; -34; -4; 22; -14; 22; -9; -33; 9; -8; 30; -29; 1; -5; 34; -18; 14; -4; 29; -18; 13; 22; 27; 37; 6; 21; 16; 18; 61; 29; -3; 2; 57; -52; -2; 7; 8; -20; -58; -14; -21; -26; 5; -32; 94; -1; -30; -29; -7; -5; 11; -20; -13; -27; 37; -10; -8; -3; -30; -25; -20; -1; -72; 20; -54; -64; 17; -49; 39; -72; 38; 21; -85; 15; 66; -130; 4; 16; -23; 8; -4; 30; -9; -8; 14; -5; 36; -55; -6; -33; 12; -42; 5; 10; -25; -56; 17; -19; -2; -36; -71; -10; 32; -76; -108; -45; 0; 31; -21; -55; -69; -141; -34; -33; -30; -96; -43; -29; 1; -148; 16; 58; -19; 39; -72; 22; -11; 32; 21; -19; 33; 19; -20; 31; 48; -28; 13; 28; -33; -66; 17; 34; 7; -70; 72; -77; 4; -111; 72; 39; 51; 14; -21; 11; 13; 54; -17; 41; 20; 64; 27; 10; 16; -1; 43; 2; -8; 36; -2; 13; 20; -15; -7; 5; 14; -14; 43; 13; -53; 34; -37; 56; -47; 27; -33; 32; -82; 30; -35; -84; 33; -73; 10; -83; -103; -33; -69; 74; -56; -82; -57; 61; -98; -97; 31; -78; -159; -63; 65; -61; -138; 72; 8; -34; 65; -39; -109; 72; 15; -39; -4; -55; -13; -8; 2; -70; -20; -12; 1; -98; -8; -53; 52; -87; -49; 43; -100; 25; 31; -100; 22; 76; 44; -27; -21; 27; -39; 5; 20; -54; 2; -111; 18; -91; -3; -141; 57; -39; 5; -13; 37; -36; 18; -37; 35; -38; 1; 90; -14; -32; -33; -32; 21; -66; 18; 62; 3; 20; -16; 2; 12; 4; -20; -16; 34; -38; 15; -42; -66; 23; 24; 28; 16; -89; 18; 19; 60; -93; 10; -96; 69; 5; 5; 73; -5; 56; 23; -13; 45; 97; -19; 27; 35; -30; 38; -41; 75; -24; 38; -40; -46; 25; -36; 24; 1; 3; -114; -10; 42; -5; 33; 6; -14; -122; -5; -15; -27; 23; -26; -23; 11; 0; -35; -2; 13; 39; 41; 30; 1; 25; 35; -8; 45; 23; -6; 35; 15; 18; -16; 30; 12; 14; -60; 39; 1; -3; -119; -7; 46; -51; 9; -17; -50; 5; -23; 6; 10; -30; 52; 38; 16; -19; -87; 37; -31; 10; 43; -21; 19; 46; 11; 12; -61; -3; -2; 83; -108; 28; -45; 94; -89; 24; -44; 34; -75; 32; -39; 39; -71; 30; 7; -38; 10; 45; 13; -82; 4; 42; -9; 31; 42; -20; 28; -12; 44; -48; -6; -6; -10; -23; -14; -49; 57; -14; -11; -51; 36; -117; -50; -47; 34; -100; -48; -52; -30; -54; -97; -22; -10; 10; -20; 27; 16; -12; 9; -31; -1; -24; -9; -10; -5]

        Assert.AreEqual(EXPECTED_DATA, event_deltas)

    let OD10_RULESET = OsuMania.create 10.0f OsuMania.NoMod

    [<Test>]
    let OsuManiaColumnLockMechanic_Replicate_1 () =

        let notes =
            ChartBuilder(4)
                .Note(0.0f<ms>)
                .Note(108.0f<ms>)
                .Note(222.0f<ms>)
                .Build()

        let replay =
            ReplayBuilder()
                .KeyDownFor(-71.0f<ms>, 30.0f<ms>)
                .KeyDownFor(108.0f<ms> - 121.0f<ms>, 30.0f<ms>) // this input is getting eaten because it is before note 0 which has already been hit
                .KeyDownFor(222.0f<ms> - 125.0f<ms>, 30.0f<ms>)
                .KeyDownFor(222.0f<ms>, 30.0f<ms>)
                .Build()

        let event_processing = GameplayEventCollector(RULESET, 4, replay, notes, 1.0f<rate>)
        event_processing.Update Time.infinity

        Assert.AreEqual(
            [
                HIT(-71.0f<ms / rate>, false)
                HIT(-11.0f<ms / rate>, false)
                HIT(0.0f<ms / rate>, false)
            ],
            event_processing.Events |> Seq.map _.Action
        )

    [<Test>]
    let OsuManiaColumnLockMechanic_Replicate_2_OD10 () =
        let notes =
            ChartBuilder(4)
                .Note(0.0f<ms>)
                .Note(125.0f<ms>)
                .Note(250.0f<ms>)
                .Note(375.0f<ms>)
                .Build()

        let replay =
            ReplayBuilder()
                .KeyDownFor(78.0f<ms>, 30.0f<ms>)
                .KeyDownFor(222.0f<ms>, 30.0f<ms>)
                .KeyDownFor(366.0f<ms>, 30.0f<ms>)
                .Build()

        let event_processing = GameplayEventCollector(OD10_RULESET, 4, replay, notes, 1.0f<rate>)
        event_processing.Update Time.infinity

        let CONVENTIONAL_LATE_WINDOW = snd OD10_RULESET.NoteWindows

        Assert.AreEqual(
            [
                HIT(78.0f<ms / rate>, false)
                HIT(CONVENTIONAL_LATE_WINDOW, true)
                HIT(-28.0f<ms / rate>, false)
                HIT(-9.0f<ms / rate>, false)
            ],
            event_processing.Events |> Seq.map _.Action
        )

    [<Test>]
    let OsuManiaColumnLockMechanic_Replicate_2_OD8 () =
        let notes =
            ChartBuilder(4)
                .Note(0.0f<ms>)
                .Note(125.0f<ms>)
                .Note(250.0f<ms>)
                .Note(375.0f<ms>)
                .Build()

        let replay =
            ReplayBuilder()
                .KeyDownFor(78.0f<ms>, 30.0f<ms>)
                .KeyDownFor(228.0f<ms>, 30.0f<ms>)
                .KeyDownFor(366.0f<ms>, 30.0f<ms>)
                .Build()

        let event_processing = GameplayEventCollector(RULESET, 4, replay, notes, 1.0f<rate>)
        event_processing.Update Time.infinity

        let CONVENTIONAL_LATE_WINDOW = snd RULESET.NoteWindows

        Assert.AreEqual(
            [
                HIT(78.0f<ms / rate>, false)
                HIT(CONVENTIONAL_LATE_WINDOW, true)
                HIT(-22.0f<ms / rate>, false)
                HIT(-9.0f<ms / rate>, false)
            ],
            event_processing.Events |> Seq.map _.Action
        )

    [<Test>]
    let OsuManiaColumnLockMechanic_Replicate_2_OD8_AltCase () =
        let notes =
            ChartBuilder(4)
                .Note(0.0f<ms>)
                .Note(125.0f<ms>)
                .Note(250.0f<ms>)
                .Note(375.0f<ms>)
                .Build()

        let replay =
            ReplayBuilder()
                .KeyDownFor(78.0f<ms>, 30.0f<ms>)
                .KeyDownFor(227.0f<ms>, 30.0f<ms>)
                .KeyDownFor(366.0f<ms>, 30.0f<ms>)
                .Build()

        let event_processing = GameplayEventCollector(RULESET, 4, replay, notes, 1.0f<rate>)
        event_processing.Update Time.infinity

        let CONVENTIONAL_LATE_WINDOW = snd RULESET.NoteWindows

        Assert.AreEqual(
            [
                HIT(78.0f<ms / rate>, false)
                HIT(102.0f<ms / rate>, false)
                HIT(CONVENTIONAL_LATE_WINDOW, true)
                HIT(-9.0f<ms / rate>, false)
            ],
            event_processing.Events |> Seq.map _.Action
        )

    [<Test>]
    [<Ignore("osu!mania EZ, HR, DT and HT windows are too complicated so I'm not bothering with them for the time being")>]
    let OsuRuleset_MatchesReplayJudgements_DonutHoleSample () =
        let replay_data = OsuReplay.decode (TEST_REPLAY_FILE_2, TEST_CHART_2.FirstNote, 1.0f<rate>)

        let ruleset = OsuMania.create (float32 TEST_OSU_FILE_2.Difficulty.OverallDifficulty) OsuMania.NoMod

        let score = ScoreProcessor.run ruleset TEST_CHART_2.Keys (StoredReplay(replay_data)) TEST_CHART_2.Notes 1.5f<rate>

        Assert.AreEqual(
            (
                TEST_REPLAY_FILE_2.CountGeki,
                TEST_REPLAY_FILE_2.Count300,
                TEST_REPLAY_FILE_2.CountKatu,
                TEST_REPLAY_FILE_2.Count100,
                TEST_REPLAY_FILE_2.Count50,
                TEST_REPLAY_FILE_2.CountMiss
            ),
            (
                score.JudgementCounts.[0],
                score.JudgementCounts.[1],
                score.JudgementCounts.[2],
                score.JudgementCounts.[3],
                score.JudgementCounts.[4],
                score.JudgementCounts.[5]
            )
        )

    [<Test>]
    let OsuRuleset_MatchesGosuMemoryDeltas_DonutHoleSample () =
        let replay_data = OsuReplay.decode (TEST_REPLAY_FILE_2, TEST_CHART_2.FirstNote, 1.0f<rate>)
        let ruleset = OsuMania.create (float32 TEST_OSU_FILE_2.Difficulty.OverallDifficulty) OsuMania.NoMod

        let score = ScoreProcessor(ruleset, TEST_CHART_2.Keys, (StoredReplay(replay_data)), TEST_CHART_2.Notes, 1.5f<rate>)
        score.Update Time.infinity

        let event_deltas =
            score.Events
            |> Seq.map (_.Action)
            |> Seq.choose (
                function
                | Hit d -> if not d.Missed then Some d.Delta else None
                | Hold d -> if not d.Missed then Some d.Delta else None
                | Release d -> if not d.Missed then Some d.Delta else None
                | _ -> None
            )
            |> Seq.map (fun f -> f * 1.5f |> float32 |> int)

        // Obtained with GosuMemory
        let EXPECTED_DATA =
            [-1; -1; 23; 48; 60; 84; 20; 20; -4; 44; 44; -4; 21; -3; 21; 46; 46; 23; 23; -1; 1; 1; 1; 120; 73; 1; 1; -46; -45; 3; 3; 3; 2; 2; 4; 4; -50; 23; -50; -2; -2; 22; 70; 1; 24; -23; -23; 2; 2; 50; 3; 3; 3; -20; -19; -19; 5; 148; -19; -17; 29; -43; -19; 5; -65; -42; -18; 6; -16; -16; 9; -22; -70; -21; -21; -21; -22; -21; 3; -20; -20; 5; 5; 77; 27; 6; 6; -18; 30; 7; 7; 7; 56; -16; 8; -15; -62; -14; 10; 10; -37; 11; -60; -11; -42; -18; -19; -19; 6; 6; -18; -18; 6; -41; -16; -16; 32; 151; -17; -16; 9; -39; 81; -14; 11; 11; -14; -13; 11; -12; 12; 12; -35; 13; 37; 61; -10; 14; -39; 80; -15; -16; -16; -16; 55; 57; 10; 10; -36; 11; -14; 10; 59; -14; 11; 11; -11; 107; -12; -12; 36; 60; 14; 14; -9; 14; 14; 62; 87; 16; 16; 16; 16; -14; 11; -13; 11; 35; 35; 36; -11; -11; -36; -12; -11; 13; 13; 15; -10; 14; -33; 39; 16; 16; 16; -7; -9; 14; -7; 17; 17; -6; 18; 18; 41; -28; -28; -4; -36; -11; -10; -10; 13; 62; 15; -8; 16; -9; 16; -7; 17; 64; 18; -5; 19; -28; 89; -5; -5; 67; 20; -3; 21; -27; -25; -25; -1; -1; 23; 47; -48; -1; -30; -6; -7; -7; 41; -6; 18; -5; 18; -28; -27; -3; 46; -2; -3; 21; -26; -25; -1; 71; -24; 0; 0; -23; 1; 1; -46; 2; 2; 50; -20; 4; 4; -26; -3; -3; 21; -2; -2; -48; -1; -23; -23; 0; -24; 24; -24; 0; 96; 2; 2; 26; 3; 27; 27; 4; 28; 28; -19; 6; 6; 5; 53; -17; 7; 7; -16; 9; 9; 1; 1; -21; 3; 3; 4; 4; -21; 3; 3; -19; 5; -18; -18; 54; -17; 6; -17; 8; 8; -42; -17; 7; -16; 8; 57; 32; -39; -15; -14; 10; 10; -14; -14; 11; 11; -19; 6; -40; -16; 8; -40; 8; -40; -15; 9; -39; -14; -14; -14; -14; -12; -12; 11; -10; -10; -10; -11; -11; 36; -10; 38; 40; 14; 14; 15; 38; 62; 32; 79; -15; -15; 32; -13; 59; 107; 12; 36; 13; 13; 36; 12; 36; -10; 13; 36; -33; -10; 15; -9; -9; 40; -6; -6; 41; -8; 17; 41; -101; 18; -5; 20; 14; 14; 38; -9; 15; 15; -9; -9; 16; -32; -8; 64; 17; -78; -6; 18; -28; -4; 20; -28; -4; -27; -74; 22; -49; -25; -31; -7; -6; -31; -6; 17; -54; -29; -28; -4; 67; -26; -26; -26; -73; -3; -3; -51; -51; -3; -50; -26; -24; -24; 71; 25; -71; -22; -22; -22; 26; -45; -3; -3; -50; -27; -2; -2; 47; -1; -1; -1; -1; 22; 0; 0; -23; 1; 1; 2; 2; 2; -21; -21; -21; -22; 3; 27; -20; 28; 28; -43; -18; -18; -18; -18; 28; -2; -2; -24; 0; 47; -24; 0; -23; 2; 73; -22; 26; -21; 26; 51; 3; 27; -21; 4; 4; -19; 5; 29; -18; 6; 78; 8; 8; 8; -15; 8; 8; -16; 8; 10; 4; 5; 5; 6; 6; 6; -41; -41; 6; -16; -16; 8; -15; -15; 9; -16; 9; 33; -13; 11; 83; -13; 36; 13; 13; 37; 13; 13; 37; 8; 8; 32; 32; 32; 9; 9; 10; -37; 11; -12; -12; 11; -35; -10; -36; -12; 37; -36; -36; -12; -35; -11; 13; -32; -9; -9; -34; -9; 62; -7; -7; 17; 17; 36; -12; -11; 13; 13; -10; 13; -9; -9; 62; 16; 16; -31; -8; -8; -31; -6; 40; -31; -7; 17; 18; -4; -4; -4; 45; -4; -28; -28; -3; -3; 45; 14; 38; -9; -9; -9; -33; -8; -7; -8; -8; -6; 18; 41; 19; 19; -4; -4; -4; -3; 20; 20; -3; -3; 45; -27; -2; 22; -25; -1; -1; -23; 0; -23; 0; -5; -5; 20; -3; -3; 19; 44; -3; -3; -25; -25; -2; 23; -25; -1; 47; -22; -22; 1; -21; 1; 1; -21; 2; -20; 4; -50; -2; -25; -47; -47; -1; -49; -24; -24; -24; 0; -46; -46; 1; -23; 1; 1; -21; -21; -21; -21; -21; -44; -20; 4; 5; -43; -20; 6; -18; 6; 24; 1; 49; 2; 2; 3; 27; 74; 4; 4; -21; -21; 28; -18; -18; -18; -17; -17; 7; -18; -18; 54; -16; 8; 56; -16; 8; 32; -16; -16; -16; -14; 9; 34; -14; 27; -19; 4; 52; 6; 6; 30; -17; -17; -18; 7; 31; 7; 31; -39; 8; 32; -38; 10; 34; -38; -13; 11; -12; -12; -12; -12; 12; 12; -11; 13; -58; -41; -17; -17; 7; -62; -15; -37; 34; -37; -37; -60; -37; -13; -35; -12; -12; -10; -10; -10; -10; -10; -127; -9; 14; -7; 17; 12; 12; 59; 12; -37; 12; 38; -59; -34; -10; 14; 14; 15; 38; 38; -9; 15; 63; -7; 17; 17; 66; -5; -4; 19; -58; -58; -9; 14; -33; -10; -7; -54; -31; -31; -7; -7; -6; 18; 18; -5; 19; 19; -28; -4; -27; 20; -74; -25; -25; -55; -55; 17; 66; 17; 17; 19; -53; -29; -28; -4; 20; -27; -3; 21; 22; 22; -1; 22; 1; 1; -23; 25; 25; -23; -5; -5; 19; 19; -4; 21; -2; 21; -2; -2; -1; 23; 23; 0; 24; 24; 26; 26; 48; 2; 26; -117; -140; 4; 3; 52; -50; -26; -96; 23; -23; 24; 0; -71; -94; 3; 3; 3; 2; 2; 2; -21; 27; 75; -44; 52; 5; 53; -66; 31; 31; -23; 2; 2; 50; 2; 26; 4; -43; -66; -41; -41; -18; -18; 6; 6; -17; -17; 31; -16; 7; 8; 32; -39; 10; 10; -44; -44; 4; 4; 5; 27; 7; -42; -18; -41; -17; -17; -16; -16; 8; -14; 33; -15; -15; -36; -12; -59; -12; -12; -19; 7; 7; 30; -51; -27; 9; 9; -27; -3; 33; 57; -49; -24; -13; -13; 24; 24; 35; 35; 59; 82; 0; 60; 13; 37; 37; 37; -22; 38; -9; -9; -9; -9; 64; -31; 17; 17; 17; -37; -12; 35; 35; -13; 36; -59; 11; 36; -36; -107; 12; 36; -11; -11; -10; 13; 13; -35; -11; 14; 14; -9; 14; -81; -8; -8; -31; -31; 40; -56; -7; -7; -54; -125; -6; -101; 18; -5; 19; -53; 19; 44; -51; 21; -58; -58; 61; 14; 86; -9; 40; -56; -7; 16; 16; -9; 15; -80; -7; -7; 41; 18; 42; -30; -5; 19; 19; 19; 68; -29; 19; 114; 20; -76; 44; 44; -3; -3; 21; -50; -2; -2; 70; -1; 22; -48; -1; 23; -72; -84; 0; -124; -5; -5; 43; -5; -5; -101; -30; -5; 19; -123; -4; 20; -27; -2; 21; -1; -1; -1; 23; 0; 0; 23; -72; 25; 25; 49; -70; 49; 95; -71; 73; 73; 2; 26; 2; 121; 26; -44; 4; 4; 28; 3; 29; 29; 29; -20; -20; 5; 5; -18; 70; -25; 23; -96; -24; 0; -48; -24; 0; 47; 1; 24; -22; -22; 1; 26; 4; 4; 4; -92; -45; 41; -19; 100; 29; 29; 53; 76; -89; 53; 53; -17; 30; -17; 102; 31; 9; 9; 9; 80; 33; -61; 58; 10; 82; -13; 35; 4; 4; 28; 77; -19; 53; -19; 6; 6; -42; -19; 4; -41; -41; 6; -41; -17; 7; -40; -16; 7; -87; -14; 10; -86; -13; -13; 34; -14; 9; -38; -13; -13; 35; -12; -36; 36; -58; -34; -10; -82; -11; 37; -10; 39; 39; -39; -15; 9; -39; 11; 11; -87; 9; 9; 34; -13; 35; -61; -13; 12; -35; -11; -130; 13; -34; 14; -36; -129; -10; -83; -105; 37; -34; 38; -9; 15; -32; -8; 16; -30; -6; -6; 17; -6; -6; -100; -30; 18; -5; -5; 19; -36; -11; 13; 13; -11; 36; -57; -10; 14; -128; 15; 15; 15; -8; 16; 40; -7; 17; 17; 41; 19; 19; 19; -77; -101; 18; -29; -29; -4; -4; -27; -27; -27; 69; -27; 20; -52; -27; -27; -27; -3; -3; -169; -26; -1; -1; -25; 47; -7; -54; -31; -125; 18; -29; -8; 17; -30; 18; -4; -4; -4; 43; -28; -4; -75; -26; -26; 44; -26; -2; -2; 22; -3; -26; -1; 22; -73; -24; -1; -1; 0; -22; 1; -47; -23; -23; 1; 1; 1; -69; 3; 3; -68; -3; 44; -51; 20; 45; -50; 22; 22; 46; -3; 21; -74; -26; -3; 22; 24; 24; -95; 0; 24; -47; 25; -46; -22; -47; 2; 2; -22; 3; 3; -44; -20; 4; -92; -19; 5; 53; -43; -18; -19; -19; -19; 30; -42; -18; -18; -22; -22; 1; 1; 1; -22; -22; 2; 25; 2; 26; -45; -20; -20; 28; -20; 5; 29; 52; -20; 26; -68; 51; -20; 29; 29; -19; 5; -42; 6; 6; 54; 8; 8; 8; 31; 8; 56; -39; -39; 33; -39; -13; -13; -13; 58; -37; 23; 142; -20; -20; -20; -20; -19; -18; -18; -17; 7; -16; 9; 32; 31; -16; 9; -15; -37; 106; -13; 11; 58; -14; 11; -13; -36; -12; 12; 36; -34; -11; -10; 14; -57; -10; -16; 9; 9; 32; 56; -39; -15; -38; -15; -13; -13; 35; 12; -36; -13; -35; 84; -11; -11; -11; -10; -33; 16; -33; -9; 15; -80; -32; -9; 40; -30; -6; 18; -28; -28; -12; -12; -12; 12; 36; -11; 12; -11; 13; -10; -10; 62; -9; -32; 16; -32; -31; -31; 88; 16; 17; -5; 18; -5; -77; -53; -29; 19; -3; -3; -27; -3; -50; -2; -9; -9; -9; 15; -7; -7; -7; -32; -31; -6; 137; 42; -6; -30; -5; -28; -29; -29; 43; 162; -28; -27; -2; -26; -2; -2; -48; -25; -1; 24; 0; 0; -24; -6; 18; -3; -3; 44; -3; -3; 21; -25; -25; -2; -24; -24; 0; -25; -25; 48; 1; 1; 49; 1; 1; 25; 26; 3; 3; 4; 4; -3; -3; 45; 23; 118; 24; 24; 24; 0; 0; -1; -1; 48; -24; -24; -22; -22; 50; -20; 2; 2; -20; 4; 28; -20; 4; 4; -19; 5; 77; -65; 7; -15; 8; 32; 1; -45; 3; -21; 2; 50; -45; 2; -20; 4; 124; -42; -18; -18; -42; -42; -42; -17; -17; 30; -15; -15; -15; -39; 10; -14; -37; -14; -37; -13; 35; 48; 48; 61; -35; 6; 125; 78; -40; -40; 31; -40; -16; -16; -15; 8; -62; -14; -14; -62; -14; -14; -37; 11; 35; -13; -13; 12; -35; 13; 13; -33; 15; -33; -8; 11; 11; 11; -13; -13; -13; 36; -11; -11; -35; -11; 37; -10; -32; 15; 40; -56; -8; 16; -32; 63; -8; -54; -7; -54; -29; -53; -29; -11; -58; -34; 14; -33; -9; -32; -8; 16; -30; -30; -30; -31; -7; -7; -29; -29; -6; -28; -5; -27; -3; -3; -3; -50; -2; -2; -74; -51; -1; 16; 16; -30; -7; -6; -6; 65; -6; -6; -29; -5; 43; -3; -3; -3; -26; -26; -2; -1; -1; 47; -24; -24; 23; -24; -24; -24; -22; -22; 2; 2; 2; 50; -21; 3; -20; -20; 44; -27; 22; -26; -2; 22; -1; -1; -25; -1; 71; 0; 25; -24; 0; 47; 1; 26; 26; -23; 2; 26; -20; 4; 4; -19; 5; 5; 6; 6; -43; -16; -16; 24; -46; 3; -117; -45; -43; -43; -19; -19; -19; -20; 5; 5; -43; 29; 52; 7; 31; -87; 80; -39; -39; -37; 28; -44; -42; 5; -18; -66; -63; -63; -40; -40; -38; -38; -38; -39; -15; 33; -37; -13; -37; -13; -61; -12; 12; -60; -11; -11; 31; -17; 6; 9; -14; -61; -61; -37; -13; -13; -13; 11; -12; -12; 12; -10; -10; -10; 14; -8; -32; -8; 35; 35; 35; 82; -14; 10; 12; -35; -11; -35; -35; -12; -34; 14; 14; 15; 38; -31; -31; -6; -6; -7; 16; -53; -5; 19; -4; -3; -3; 37; 37; -33; 14; -55; -32; -54; -6; 18; 161; 42; -30; 17; 17; -30; -7; 42; 20; 44; -99; -4; -75; -50; -2; -96; -24; 41; -54; -7; -7; -6; -76; -98; -51; -27; -5; -28; -4; -4; -27; -2; 22; -24; -24; -1; 47; -24; -23; 2; -47; -22; 0; 0; -28; -4; -26; -121; -74; -25; -25; -2; 0; 0; 24; -24; 0; 49; -23; 1; -21; 51; -44; 4; 4; -66; -19; 6; 46; -25; -1; 0; -72; -47; -70; -23; -23; -45; -22; -22; -44; -21; -19; 5; 6; 6; -19; -41; 6; -16; 9; 9; 49; -81; -56; -20; -20; -56; -32; 4; 4; -79; -54; -42; -42; -29; -6; 5; 5; 29; 29; 7; -52; 7; 7; 31; 31; 8; -27; 9; 9; 9; 9; 10; -85; -13; -13; 11; 12; 12; 12; 52; -19; -114; 5; -18; 29; -17; -17; 31; -64; 8; 8; -15; -15; 8; -16; 10; 10; 10; -15; 10; -86; -37; -14; -12; -12; -12; -84; -131; 13; 13; -36; -12; -12; -83; 36; -106; 37; -10; 38; -9; 40; -79; 62; -33; 15; 15; -39; -15; -61; 9; 9; 9; -14; -133; -14; -37; -37; -60; 59; 37; -35; -11; -11; 37; -35; -10; -11; -11; -10; 133; -57; -9; 15; -56; -32; -102; 17; -31; 17; 42; -6; 17; -76; -28; -28; -101; -29; -65; 18; 18; 60; -12; -12; 12; -83; 14; 14; 61; -10; 14; -57; 16; 40; 87; 16; 16; 40; 40; -7; 18; -30; 89; -7; 88; 66; 66; -5; 67; -29; 92; 68; 21; 44; 44; 44; 22; 22; 45; 45; -1; 23; 47; 47; -1; 47; -166; -23; 25; -101; 18; 42; -54; 42; 42; -52; 44; -27; -27; -3; 45; -147; -28; -4; 19; 8; -28; -28; 44; 21; 45; 45; 46; 70; 0; 23; -72; 71; -25; 24; 119; 0; 24; -48; 25; 49; 49; 50; 74; 27; 27; 27; 28; 97; 3; 27; 27; 27; -2; 22; 0; 0; 0; -71; -1; -1; -72; -24; 0; -47; 1; 1; -22; -22; -22; -117; -20; -20; -68; -44; -20; 28; -21; 4; -69; -20; -20; 51; -20; -114; 5; -42; -42; -18; -90; 6; 6; -41; -87; 32; 32; -40; 7; 1; 1; -93; 50; 2; 2; 26; 3; 27; -19; 5; -91; 28; -20; 3; -91; 5; 5; -66; -113; 6; -41; -17; -88; -16; 7; -15; -15; -39; -16; 8; -63; -15; -15; -15; -13; 10; -60; -13; 11; -37; -12; 11; -36; 12; 12; 36; -19; 5; -90; -17; -17; -18; 6; 54; -17; 7; 7; 31; 9; 33; 33; 56; 9; 33; 33; -14; 10; -60; -37; -13; -180; -38; -59; 60; -12; 36; -35; -35; -59; -11; 38; -57; 14; 38; 14; 14; -105; 85; -8; 16; -8; -14; 10; 58; -13; 11; 34; 82; -12; 36; -12; -12; -12; 36; -11; 13; -106; -35; 13; 61; -35; 14; 37; 37; 39; -9; -104; 38; 38; 17; 40; 40; 16; -55; -7; -55; -6; -6; 18; -124; -5; 19; -28; 20; -77; -5; -5; -34; -10; 14; -33; -9; -9; 15; -9; -9; -56; -8; -8; 64; 17; 40; -54; -30; -7; -149; -30; 18; -172; 18; -54; -6; -28; -5; -100; 19; -4; -4; -27; -3; -3; 46; 21; 21; -27; -2; 22; 46; -1; -1; 22; -24; -1; -7; -7; -53; 66; -6; 19; 42; -5; 44; -52; -28; -4; 93; -3; -3; 21; 21; -4; -4; 68; -27; -2; -2; 21; -1; -1; -48; -1; 23; 48; -23; -23; 0; 24; 2; 26; -47; -47; 49; -45; -45; -22; 2; 87; 27; 15; -21; -38; -44; -49; -55; -1; -1; 69; 69; 23; 48; -23; 1; 1; -23; 1; 1; -22; -22; 2; -21; -20; 4; 5; -19; 4; -44; -19; 6; 6; 7; 7; -15; -15; 8; 8; 49; -47; -23; -23; 1; -22; -45; -44; -44; -20; -44; 4; 27; -19; -19; 53; 6; -17; -17; -16; -16; 7; -18; -18; 55; 8; -39; -15; 9; -14; -37; -13; 106; 33; -19; 5; 149; 29; 77; 6; -18; -16; -16; 30; -40; -16; 7; -40; -17; 7; 33; -62; -14; -14; -84; -14; -13; -13; -12; 12; -35; 13; -11; -11; 37; 61; 7; -17; 7; 8; 33; -15; -14; -13; -13; -13; -13; -13; 10; -13; -13; 36; 12; -11; 13; -34; -11; 13; -10; 15; 38; -10; -9; 15; -32; -32; -8; -8; -9; -9; -9; 15; -73; -73; -14; 10; -72; -49; 12; 36; -70; -46; 12; 12; 26; 26; 62; 62; -46; -21; -9; 15; -68; -19; -8; 16; 4; 52; 42; 42; -17; -17; 44; 44; 19; 19; 19; 44; 21; 21; 21; 21; -46; -46; 13; 13; -44; -44; 15; 15; -43; -43; -6; -6; 4; 28; 17; 41; 54; 6; 90; 66; 32; 68; -86; 33; 68; -28; -88; -28; -63; -26; -73; -1; -1; -1; -26; -1; -1; -1; -6; -43; -7; -7; 17; -102; -6; -42; -29; -6; 19; 19; -29; -64; -3; -3; 45; -51; -4; -63; -28; -28; -28; -4; -85; -62; -26; -1; -48; -48; -24; 0; -1; -1; -1; 22; -83; -59; -23; 25; -70; -22; 1; 26; -21; -21; 3; -44; -26; -4; -4; 70; -1; -26; -26; -3; 22; -25; -48; -24; -24; -24; -23; 25; -22; 2; 2; 26; -57; -57; -32; 3; 3; 3; 26; -56; -9; -9; -20; -20; 3; 3; -55; -55; -7; 5; 5; 5; 5; -53; 18; 18; 30; 7; 30; 55; 55; -23; 1; 1; -23; 3; 3; -116; -44; -20; -42; -19; 5; 7; 7; 7; -41; -16; -16; -16; -16; -14; -14; 10; -43; 3; 3; -19; 6; 54; -41; -18; -18; -41; -17; -17; -16; 33; -63; 10; 10; 11; 36; 83; 12; 12; 12; -18; 7; 30; -15; -15; 32; 10; 10; -15; 8; 8; 10; 11; 11; -12; 11; 57; -12; -12; 36; -10; 37; -10; 39; 60; 14; 15; 15; -15; 34; 57; -13; -13; 11; 11; 37; -10; -10; -35; -35; -10; -10; -9; -9; 39; -6; -6; -6; -30; -30; -29; -5; 19; 68; -59; -11; -11; -32; -8; 38; -8; 16; 40; -5; -5; 66; -5; 19; 19; -3; -3; 22; -26; 21; 0; 0; 23; -30; -7; -7; -29; -5; 18; -28; -4; 19; -26; -3; 46; -1; 24; -24; -24; 24; -22; -22; -22; -22; 3; 3; -27; -4; 44; -2; -2; -2; -1; -1; -24; -1; 23; -1; 2; 2; 1; 1; 1; -21; -21; 75; 3; 28; 74; 4; 4; 5; 30; 30; 0; -95; 143; -23; -70; -23; -69; -141; -19; -19; 6; 6; 6; 6; -42; -42; -18; -18; -16; -16; 9; 9; -39; 26; -69; -21; 2; -69; -139; 28; 51; -19; 29; -19; 5; 29; -19; -114; 5; 5; -18; 30; -66; -16; -16; -40; -16; 8; -38; -14; 9; -86; -133; -14; -13; -61; -61; -14; -108; -13; 12; -35; 12; 12; -82; -58; -11; -33; -9; 30; -184; -16; -16; 9; -16; -16; -16; 8; 31; -15; 8; 32; -134; -15; 10; 34; 10; -60; 11; -36; -12; 13; -58; 13; 13; -11; -11; 14; -58; 14; 14; -32; 14; 39; -57; 16; 16; -79; -30; -68; -31; -8; 17; -79; -6; -6; -59; 10; 36; -36; -12; 12; -83; -35; -11; 13; -34; -9; -9; 38; -33; -9; -9; -80; 17; 17; 39; 63; 63; -32; 63; 87; -8; 40; 40; 17; 17; -78; 65; -6; 19; 43; 20; 20; 20; 20; -28; -123; -4; -4; -26; 44; -170; -3; 45; -26; -2; -32; 15; -79; 64; 16; 16; -55; -30; -7; 17; -30; -5; -5; -243; -76; 7; -28; 44; 18; 67; 67; -99; 20; 44; 21; 45; -26; 22; 22; -25; 0; 0; -48; 0; 24; 72; 47; 47; 0; 0; 72; 0; 48; 1; 25; 25; 73; 3; 43; -3; 20; 20; -27; -3; 20; -26; -26; 46; -25; -1; 47; -24; 0; -95; 24; -23; 2; -24; -24; -143; 0; 1; 1; -45; 3; 3; -92; 3; -44; 28; -42; 4; -89; 30; -20; 53; -18; -18; 30; -65; 7; 7; 8; 48; 48; 1; 25; 72; 26; 26; 50; 3; 3; 27; 3; 27; 50; 28; 28; 52; 28; 28; 28; -67; 5; 5; -42; -18; 6; -17; 7; 31; -17; 8; 32; -14; 9; 33; -38; -15; 34; -14; 9; 33; -37; -14; 11; -36; -13; 36; 36; -18; -18; 8; 8; 8; 10; 10; 10; -14; 10; -12; -11; -11; -9; -9; 87; -15; 9; 9; -13; 12; -12; 12; 36; -10; 14; -9; -9; 39; -9; 15; 15; -82; -34; -10; -81; -33; -9; -7; -7; -7; -173; -31; -7; 17; -29; 18; -60; -37; -12; -11; -11; 12; -34; -10; 14; 38; -11; 15; 15; 61; -10; 14; 38; -32; -103; 16; -31; -30; -30; -30; -30; -5; -5; -28; 18; -77; 42; -29; -6; -27; -27; -5; -170; -27; -27; -27; -26; -25; 23; -2; 63; 63; -8; 16; -54; 65; -6; 39; -31; -31; -79; 40; -54; 18; -53; -5; -5; 67; -4; 20; 20; -27; 21; -2; -2; 21; -2; -2; 45; -2; -2; -1; 23; -48; 0; 25; 26; 26; 26; -45; 2; 2; -22; 2; 2; -45; 2; 27; -4; -4; 20; -74; -3; -3; -26; -2; 22; 0; 23; 23; -1; -1; 23; 0; 0; -23; 0; 1; 1; 25; 2; 2; 26; -21; 3; 26; -20; 4; -67; 52; 5; 5; -20; -20; 28; -44; -19; 5; -18; -18; 6; 7; 32; 32; 25; 25; 49; 2; 2; 50; -21; 4; 4; 4; -19; 4; 28; 52; 4; 4; 27; 4; -91; 28; 28; -19; 6; -18; 6; 30; 30; -17; 7; 7; 7; 8; 8; -17; -17; 7; 30; 7; -87; 9; 9; 57; -14; 33; 23; 47; -13; 11; 34; 34; 34; 77; 28; 28; 78; 101; 91; 91; -18; 6; 6; 6; 8; 8; -16; -16; 57; 57; 43; 43; -15; -15; -15; 10; -13; -13; -38; -15; 35; 58; 22; 71; -12; -12; -12; 12; -35; -11; -58; -11; -11; 61; 49; 73; -10; -10; -10; -10; -10; 15; -81; -15; 8; 32; 22; 69; -37; -14; 11; 11; -13; -13; -60; -13; -13; 12; 73; 95; -11; -11; 13; 13; -11; 14; -81; -9; -9; 39; 52; 75; -9; -9; -9; 15; -8; 17; -6; 17; 66; 113; 77; -29; 19; 19; 19; -34; 38; 38; -33; -10; -10; -10; -152; -32; -9; 14; 15; 39; -8; -8; -8; 15; -30; -30; 16; 16; -6; -6; 18; 18; -76; -52; 20; 20; 21; 45; 45; 45; -2; -2; -2; 21]

        printfn "%.2f%%" (score.Accuracy * 100.0)

        Assert.AreEqual(EXPECTED_DATA, event_deltas)

    [<Test>]
    let OsuRuleset_EarlyMissWindowBehaviour () =
        let notes =
            ChartBuilder(4)
                .Note(0.0f<ms>)
                .Note(1000.0f<ms>)
                .Note(2000.0f<ms>)
                .Note(3000.0f<ms>)
                .Build()

        let replay =
            ReplayBuilder()
                .KeyDownFor(0.0f<ms> - 166.0f<ms>, 30.0f<ms>) // this hit is too early to register on the note
                .KeyDownFor(0.0f<ms>, 30.0f<ms>)

                .KeyDownFor(1000.0f<ms> - 165.0f<ms>, 30.0f<ms>) // so is this one
                .KeyDownFor(1000.0f<ms>, 30.0f<ms>)

                .KeyDownFor(2000.0f<ms> - 164.0f<ms>, 30.0f<ms>) // 164 is the exact border where it hits and so the perfect hit is ignored
                .KeyDownFor(2000.0f<ms>, 30.0f<ms>)

                .KeyDownFor(3000.0f<ms> - 163.0f<ms>, 30.0f<ms>) // 1ms inside border
                .KeyDownFor(3000.0f<ms>, 30.0f<ms>)
                .Build()

        let event_processing = GameplayEventCollector(OsuMania.create 8.0f OsuMania.NoMod, 4, replay, notes, 1.0f<rate>)
        event_processing.Update Time.infinity

        Assert.AreEqual(
            [
                HIT(0.0f<ms / rate>, false)

                GHOST_TAP
                HIT(0.0f<ms / rate>, false)

                HIT(-164.0f<ms / rate>, false)
                GHOST_TAP

                HIT(-163.0f<ms / rate>, false)
                GHOST_TAP
            ],
            event_processing.Events |> Seq.map _.Action
        )

    [<Test(Description = "Documents a possible bug (or intentional behaviour) of osu!stable on the very edge of the late window")>]
    let OsuRuleset_LateOkWindowBehaviour () =
        let notes =
            ChartBuilder(4)
                .Note(0.0f<ms>)
                .Note(1000.0f<ms>)
                .Note(2000.0f<ms>)
                .Note(3000.0f<ms>)
                .Build()

        // end of 100 window is allegedly 103 according to wiki but check this out:

        let replay =
            ReplayBuilder()
                .KeyDownFor(0.0f<ms> + 105.0f<ms>, 30.0f<ms>) // this hit is too late to register on the note

                .KeyDownFor(1000.0f<ms> + 104.0f<ms>, 30.0f<ms>) // so is this one

                .KeyDownFor(2000.0f<ms> + 103.0f<ms>, 30.0f<ms>) // according to osu! wiki this should hit, but it doesn't, I have checked

                .KeyDownFor(3000.0f<ms> + 102.0f<ms>, 30.0f<ms>) // 1ms inside border, but actually this is the latest ms you can hit the note
                .Build()

        let ruleset = OsuMania.create 8.0f OsuMania.NoMod

        let event_processing = GameplayEventCollector(ruleset, 4, replay, notes, 1.0f<rate>)
        event_processing.Update Time.infinity

        let LATE_WINDOW_ON_MISS = snd ruleset.NoteWindows

        Assert.AreEqual(
            [
                HIT(LATE_WINDOW_ON_MISS, true)

                HIT(LATE_WINDOW_ON_MISS, true)

                HIT(LATE_WINDOW_ON_MISS, true) // a +103ms hit still misses the note!

                HIT(102.0f<ms / rate>, false)
            ],
            event_processing.Events |> Seq.map _.Action |> Seq.filter ((<>) GHOST_TAP)
        )

    [<Test>]
    let OsuRuleset_LnEarlyHeadPerfectReleaseWindows () =
        for step = 0 to 20 do

            let od = float32 step * 0.5f

            let perfect = floor_uom (OsuMania.perfect_window od) * 1.2f * 1.0f<rate> |> floor_uom
            let great = floor_uom (OsuMania.great_window od) * 1.1f * 1.0f<rate> |> floor_uom
            let good = floor_uom (OsuMania.good_window od) * 1.0f<rate> |> floor_uom
            let ok = floor_uom (OsuMania.ok_window od) * 1.0f<rate> |> floor_uom
            let meh = floor_uom (OsuMania.meh_window od) * 1.0f<rate> |> floor_uom

            let notes =
                ChartBuilder(4)
                    .Hold(0.0f<ms>, 100.0f<ms>)
                    .Hold(200.0f<ms>, 300.0f<ms>)

                    .Hold(400.0f<ms>, 500.0f<ms>)
                    .Hold(600.0f<ms>, 700.0f<ms>)

                    .Hold(800.0f<ms>, 900.0f<ms>)
                    .Hold(1000.0f<ms>, 1100.0f<ms>)

                    .Hold(1300.0f<ms>, 1400.0f<ms>)
                    .Hold(1600.0f<ms>, 1700.0f<ms>)

                    .Hold(1900.0f<ms>, 2000.0f<ms>)
                    //.Hold(2200.0f<ms>, 2300.0f<ms>)
                    .Build()

            let replay =
                ReplayBuilder()
                    .KeyDownUntil(0.0f<ms> - perfect, 100.0f<ms>) // WITHIN perfect window, gets 300g
                    .KeyDownUntil(200.0f<ms> - perfect - 1.0f<ms>, 300.0f<ms>) // gets 300

                    .KeyDownUntil(400.0f<ms> - great, 500.0f<ms>) // 300
                    .KeyDownUntil(600.0f<ms> - great - 1.0f<ms>, 700.0f<ms>) // 200

                    .KeyDownUntil(800.0f<ms> - good, 900.0f<ms>) // 200
                    .KeyDownUntil(1000.0f<ms> - good - 1.0f<ms>, 1100.0f<ms>) // 100

                    .KeyDownUntil(1300.0f<ms> - ok, 1400.0f<ms>) // 100
                    .KeyDownUntil(1600.0f<ms> - ok - 1.0f<ms>, 1700.0f<ms>) // 50

                    .KeyDownUntil(1900.0f<ms> - meh, 2000.0f<ms>) // 50
                    //.KeyDownUntil(2200.0f<ms> - meh - 1.0f<ms>, 2300.0f<ms>) // gets 100 again for some reason

                    .Build()

            let ruleset = OsuMania.create od OsuMania.NoMod

            printfn "TRYING OD %.1f\n" od

            let event_processing = ScoreProcessor(ruleset, 4, replay, notes, 1.0f<rate>)
            event_processing.Update Time.infinity

            let judgement_sequence =
                event_processing.Events
                |> Seq.map _.Action
                |> Seq.choose (function Release e -> e.Judgement | _ -> None)
                |> Seq.map fst
                |> Seq.map debug

            Assert.AreEqual(
                [
                    0
                    1
                    1
                    2
                    2
                    3
                    3
                    4
                    4
                    //3
                ],
                judgement_sequence
            )

    [<Test>]
    [<Ignore("Doesn't quite match up with osu!mania. Oh well it will probably never happen in a score")>]
    let OsuRuleset_LateLnHeadWindowsBehaviour () =
        let notes =
            ChartBuilder(4)
                .Hold(0.0f<ms>, 1.0f<ms>)
                .Hold(400.0f<ms>, 401.0f<ms>)
                .Hold(800.0f<ms>, 801.0f<ms>)
                .Build()

        let replay =
            ReplayBuilder()
                .KeyDownFor(0.0f<ms> + 102.0f<ms>, 1.0f<ms>)
                .KeyDownFor(400.0f<ms> + 103.0f<ms>, 1.0f<ms>)
                .KeyDownFor(800.0f<ms> + 104.0f<ms>, 1.0f<ms>)
                .Build()

        let event_processing = ScoringEventCollector(OsuMania.create 8.0f OsuMania.NoMod, 4, replay, notes, 1.0f<rate>)
        event_processing.Update Time.infinity

        let judgement_sequence =
            event_processing.Events
            |> Seq.map _.Action
            |> Seq.choose (function Release e -> e.Judgement | _ -> None)
            |> Seq.map fst

        Assert.AreEqual([ 3; 4; 5 ], judgement_sequence)

    [<Test>]
    let OsuRuleset_LnCombinedJudgementBehaviour_1 () =

        let TEST_DATA =
            [
                -164.0f<ms>, -164.0f<ms>, 5
                -164.0f<ms>, -127.0f<ms>, 4
                -164.0f<ms>, -103.0f<ms>, 4
                -164.0f<ms>, -73.0f<ms>, 4
                -164.0f<ms>, -44.0f<ms>, 4
                -164.0f<ms>, -19.0f<ms>, 4
                -164.0f<ms>, 19.0f<ms>, 4
                -164.0f<ms>, 44.0f<ms>, 4
                -164.0f<ms>, 73.0f<ms>, 4
                -164.0f<ms>, 103.0f<ms>, 4
                -164.0f<ms>, 127.0f<ms>, 4
                -164.0f<ms>, 164.0f<ms>, 4
            ]

        for head, tail, expected_judgement in TEST_DATA do

            let notes =
                ChartBuilder(4)
                    .Hold(0.0f<ms>, 800.0f<ms>)
                    .Build()

            let replay =
                ReplayBuilder()
                    .KeyDownUntil(0.0f<ms> + head, 800.0f<ms> + tail)
                    .Build()

            let event_processing = ScoringEventCollector(OsuMania.create 8.0f OsuMania.NoMod, 4, replay, notes, 1.0f<rate>)
            event_processing.Update Time.infinity

            let judgement =
                event_processing.Events
                |> Seq.map _.Action
                |> Seq.choose (function Release e -> e.Judgement | _ -> None)
                |> Seq.map fst
                |> Seq.tryExactlyOne

            Assert.AreEqual(Some expected_judgement, judgement)

    [<Test>]
    let OsuRuleset_LnCombinedJudgementBehaviour_2 () =

        let TEST_DATA =
            [
                -127.0f<ms>, -164.0f<ms>, 5
                -127.0f<ms>, -127.0f<ms>, 4
                -127.0f<ms>, -103.0f<ms>, 4
                -127.0f<ms>, -73.0f<ms>, 4
                -127.0f<ms>, -44.0f<ms>, 4
                -127.0f<ms>, -19.0f<ms>, 4
                -127.0f<ms>, 19.0f<ms>, 4
                -127.0f<ms>, 44.0f<ms>, 4
                -127.0f<ms>, 73.0f<ms>, 4
                -127.0f<ms>, 103.0f<ms>, 4
                -127.0f<ms>, 127.0f<ms>, 4
                -127.0f<ms>, 164.0f<ms>, 4
            ]

        for head, tail, expected_judgement in TEST_DATA do

            let notes =
                ChartBuilder(4)
                    .Hold(0.0f<ms>, 800.0f<ms>)
                    .Build()

            let replay =
                ReplayBuilder()
                    .KeyDownUntil(0.0f<ms> + head, 800.0f<ms> + tail)
                    .Build()

            let event_processing = ScoringEventCollector(OsuMania.create 8.0f OsuMania.NoMod, 4, replay, notes, 1.0f<rate>)
            event_processing.Update Time.infinity

            let judgement =
                event_processing.Events
                |> Seq.map _.Action
                |> Seq.choose (function Release e -> e.Judgement | _ -> None)
                |> Seq.map fst
                |> Seq.tryExactlyOne

            Assert.AreEqual(Some expected_judgement, judgement)

    [<Test>]
    let OsuRuleset_LnCombinedJudgementBehaviour_3 () =

        let TEST_DATA =
            [
                -103.0f<ms>, -164.0f<ms>, 5
                -103.0f<ms>, -127.0f<ms>, 4
                -103.0f<ms>, -103.0f<ms>, 3
                -103.0f<ms>, -73.0f<ms>, 3
                -103.0f<ms>, -44.0f<ms>, 3
                -103.0f<ms>, -19.0f<ms>, 3
                -103.0f<ms>, 19.0f<ms>, 3
                -103.0f<ms>, 44.0f<ms>, 3
                -103.0f<ms>, 73.0f<ms>, 3
                -103.0f<ms>, 103.0f<ms>, 4
                -103.0f<ms>, 127.0f<ms>, 4
                -103.0f<ms>, 164.0f<ms>, 4
            ]

        for head, tail, expected_judgement in TEST_DATA do

            let notes =
                ChartBuilder(4)
                    .Hold(0.0f<ms>, 800.0f<ms>)
                    .Build()

            let replay =
                ReplayBuilder()
                    .KeyDownUntil(0.0f<ms> + head, 800.0f<ms> + tail)
                    .Build()

            let event_processing = ScoringEventCollector(OsuMania.create 8.0f OsuMania.NoMod, 4, replay, notes, 1.0f<rate>)
            event_processing.Update Time.infinity

            let judgement =
                event_processing.Events
                |> Seq.map _.Action
                |> Seq.choose (function Release e -> e.Judgement | _ -> None)
                |> Seq.map fst
                |> Seq.tryExactlyOne

            Assert.AreEqual(Some expected_judgement, judgement)

    [<Test>]
    let OsuRuleset_LnCombinedJudgementBehaviour_4 () =

        let TEST_DATA =
            [
                -73.0f<ms>, -164.0f<ms>, 5
                -73.0f<ms>, -127.0f<ms>, 3
                -73.0f<ms>, -103.0f<ms>, 3
                -73.0f<ms>, -73.0f<ms>, 2
                -73.0f<ms>, -44.0f<ms>, 2
                -73.0f<ms>, -19.0f<ms>, 2
                -73.0f<ms>, 19.0f<ms>, 2
                -73.0f<ms>, 44.0f<ms>, 2
                -73.0f<ms>, 73.0f<ms>, 2
                -73.0f<ms>, 103.0f<ms>, 3
                -73.0f<ms>, 127.0f<ms>, 3
                -73.0f<ms>, 164.0f<ms>, 3
            ]

        for head, tail, expected_judgement in TEST_DATA do

            let notes =
                ChartBuilder(4)
                    .Hold(0.0f<ms>, 800.0f<ms>)
                    .Build()

            let replay =
                ReplayBuilder()
                    .KeyDownUntil(0.0f<ms> + head, 800.0f<ms> + tail)
                    .Build()

            let event_processing = ScoringEventCollector(OsuMania.create 8.0f OsuMania.NoMod, 4, replay, notes, 1.0f<rate>)
            event_processing.Update Time.infinity

            let judgement =
                event_processing.Events
                |> Seq.map _.Action
                |> Seq.choose (function Release e -> e.Judgement | _ -> None)
                |> Seq.map fst
                |> Seq.tryExactlyOne

            Assert.AreEqual(Some expected_judgement, judgement)

    [<Test>]
    let OsuRuleset_LnCombinedJudgementBehaviour_5 () =

        let TEST_DATA =
            [
                -44.0f<ms>, -164.0f<ms>, 5
                -44.0f<ms>, -127.0f<ms>, 3
                -44.0f<ms>, -103.0f<ms>, 3
                -44.0f<ms>, -73.0f<ms>, 2
                -44.0f<ms>, -44.0f<ms>, 1
                -44.0f<ms>, -19.0f<ms>, 1
                -44.0f<ms>, 19.0f<ms>, 1
                -44.0f<ms>, 44.0f<ms>, 1
                -44.0f<ms>, 73.0f<ms>, 2
                -44.0f<ms>, 103.0f<ms>, 3
                -44.0f<ms>, 127.0f<ms>, 3
                -44.0f<ms>, 164.0f<ms>, 3
            ]

        for head, tail, expected_judgement in TEST_DATA do

            let notes =
                ChartBuilder(4)
                    .Hold(0.0f<ms>, 800.0f<ms>)
                    .Build()

            let replay =
                ReplayBuilder()
                    .KeyDownUntil(0.0f<ms> + head, 800.0f<ms> + tail)
                    .Build()

            let event_processing = ScoringEventCollector(OsuMania.create 8.0f OsuMania.NoMod, 4, replay, notes, 1.0f<rate>)
            event_processing.Update Time.infinity

            let judgement =
                event_processing.Events
                |> Seq.map _.Action
                |> Seq.choose (function Release e -> e.Judgement | _ -> None)
                |> Seq.map fst
                |> Seq.tryExactlyOne

            Assert.AreEqual(Some expected_judgement, judgement)

    [<Test>]
    let OsuRuleset_LnCombinedJudgementBehaviour_6 () =

        let TEST_DATA =
            [
                -19.0f<ms>, -164.0f<ms>, 5
                -19.0f<ms>, -127.0f<ms>, 2
                -19.0f<ms>, -103.0f<ms>, 2
                -19.0f<ms>, -73.0f<ms>, 2
                -19.0f<ms>, -44.0f<ms>, 1
                -19.0f<ms>, -19.0f<ms>, 0
                -19.0f<ms>, 19.0f<ms>, 0
                -19.0f<ms>, 44.0f<ms>, 1
                -19.0f<ms>, 73.0f<ms>, 2
                -19.0f<ms>, 103.0f<ms>, 2
                -19.0f<ms>, 127.0f<ms>, 2
                -19.0f<ms>, 164.0f<ms>, 2
            ]

        for head, tail, expected_judgement in TEST_DATA do

            let notes =
                ChartBuilder(4)
                    .Hold(0.0f<ms>, 800.0f<ms>)
                    .Build()

            let replay =
                ReplayBuilder()
                    .KeyDownUntil(0.0f<ms> + head, 800.0f<ms> + tail)
                    .Build()

            let event_processing = ScoringEventCollector(OsuMania.create 8.0f OsuMania.NoMod, 4, replay, notes, 1.0f<rate>)
            event_processing.Update Time.infinity

            let judgement =
                event_processing.Events
                |> Seq.map _.Action
                |> Seq.choose (function Release e -> e.Judgement | _ -> None)
                |> Seq.map fst
                |> Seq.tryExactlyOne

            Assert.AreEqual(Some expected_judgement, judgement)

    [<Test>]
    let OsuRuleset_LnCombinedJudgementBehaviour_7 () =

        let TEST_DATA =
            [
                19.0f<ms>, -164.0f<ms>, 5
                19.0f<ms>, -127.0f<ms>, 2
                19.0f<ms>, -103.0f<ms>, 2
                19.0f<ms>, -73.0f<ms>, 2
                19.0f<ms>, -44.0f<ms>, 1
                19.0f<ms>, -19.0f<ms>, 0
                19.0f<ms>, 19.0f<ms>, 0
                19.0f<ms>, 44.0f<ms>, 1
                19.0f<ms>, 73.0f<ms>, 2
                19.0f<ms>, 103.0f<ms>, 2
                19.0f<ms>, 127.0f<ms>, 2
                19.0f<ms>, 164.0f<ms>, 2
            ]

        for head, tail, expected_judgement in TEST_DATA do

            let notes =
                ChartBuilder(4)
                    .Hold(0.0f<ms>, 800.0f<ms>)
                    .Build()

            let replay =
                ReplayBuilder()
                    .KeyDownUntil(0.0f<ms> + head, 800.0f<ms> + tail)
                    .Build()

            let event_processing = ScoringEventCollector(OsuMania.create 8.0f OsuMania.NoMod, 4, replay, notes, 1.0f<rate>)
            event_processing.Update Time.infinity

            let judgement =
                event_processing.Events
                |> Seq.map _.Action
                |> Seq.choose (function Release e -> e.Judgement | _ -> None)
                |> Seq.map fst
                |> Seq.tryExactlyOne

            Assert.AreEqual(Some expected_judgement, judgement)

    [<Test>]
    let OsuRuleset_LnCombinedJudgementBehaviour_8 () =

        let TEST_DATA =
            [
                44.0f<ms>, -164.0f<ms>, 5
                44.0f<ms>, -127.0f<ms>, 3
                44.0f<ms>, -103.0f<ms>, 3
                44.0f<ms>, -73.0f<ms>, 2
                44.0f<ms>, -44.0f<ms>, 1
                44.0f<ms>, -19.0f<ms>, 1
                44.0f<ms>, 19.0f<ms>, 1
                44.0f<ms>, 44.0f<ms>, 1
                44.0f<ms>, 73.0f<ms>, 2
                44.0f<ms>, 103.0f<ms>, 3
                44.0f<ms>, 127.0f<ms>, 3
                44.0f<ms>, 164.0f<ms>, 3
            ]

        for head, tail, expected_judgement in TEST_DATA do

            let notes =
                ChartBuilder(4)
                    .Hold(0.0f<ms>, 800.0f<ms>)
                    .Build()

            let replay =
                ReplayBuilder()
                    .KeyDownUntil(0.0f<ms> + head, 800.0f<ms> + tail)
                    .Build()

            let event_processing = ScoringEventCollector(OsuMania.create 8.0f OsuMania.NoMod, 4, replay, notes, 1.0f<rate>)
            event_processing.Update Time.infinity

            let judgement =
                event_processing.Events
                |> Seq.map _.Action
                |> Seq.choose (function Release e -> e.Judgement | _ -> None)
                |> Seq.map fst
                |> Seq.tryExactlyOne

            Assert.AreEqual(Some expected_judgement, judgement)

    [<Test>]
    let OsuRuleset_LnCombinedJudgementBehaviour_9 () =

        let TEST_DATA =
            [
                73.0f<ms>, -164.0f<ms>, 5
                73.0f<ms>, -127.0f<ms>, 3
                73.0f<ms>, -103.0f<ms>, 3
                73.0f<ms>, -73.0f<ms>, 2
                73.0f<ms>, -44.0f<ms>, 2
                73.0f<ms>, -19.0f<ms>, 2
                73.0f<ms>, 19.0f<ms>, 2
                73.0f<ms>, 44.0f<ms>, 2
                73.0f<ms>, 73.0f<ms>, 2
                73.0f<ms>, 103.0f<ms>, 3
                73.0f<ms>, 127.0f<ms>, 3
                73.0f<ms>, 164.0f<ms>, 3
            ]

        for head, tail, expected_judgement in TEST_DATA do

            let notes =
                ChartBuilder(4)
                    .Hold(0.0f<ms>, 800.0f<ms>)
                    .Build()

            let replay =
                ReplayBuilder()
                    .KeyDownUntil(0.0f<ms> + head, 800.0f<ms> + tail)
                    .Build()

            let event_processing = ScoringEventCollector(OsuMania.create 8.0f OsuMania.NoMod, 4, replay, notes, 1.0f<rate>)
            event_processing.Update Time.infinity

            let judgement =
                event_processing.Events
                |> Seq.map _.Action
                |> Seq.choose (function Release e -> e.Judgement | _ -> None)
                |> Seq.map fst
                |> Seq.tryExactlyOne

            Assert.AreEqual(Some expected_judgement, judgement)

    [<Test>]
    [<Ignore("Horrible osu!mania bug where +103 hits on notes are ignored but +103 hits on a hold head are legit and don't lock you to a max judgement of MEH, but +104 hits do")>]
    let OsuRuleset_LnCombinedJudgementBehaviour_10 () =

        let TEST_DATA =
            [
                103.0f<ms>, -164.0f<ms>, 5
                103.0f<ms>, -127.0f<ms>, 4
                103.0f<ms>, -103.0f<ms>, 3
                103.0f<ms>, -73.0f<ms>, 3
                103.0f<ms>, -44.0f<ms>, 3
                103.0f<ms>, -19.0f<ms>, 3
                103.0f<ms>, 19.0f<ms>, 3
                103.0f<ms>, 44.0f<ms>, 3
                103.0f<ms>, 73.0f<ms>, 3
                103.0f<ms>, 103.0f<ms>, 4
                103.0f<ms>, 127.0f<ms>, 4
                103.0f<ms>, 164.0f<ms>, 4
            ]

        for head, tail, expected_judgement in TEST_DATA do

            //printfn "trying head: %.0fms; tail: %.0fms; expecting: %i" head tail expected_judgement

            let notes =
                ChartBuilder(4)
                    .Hold(0.0f<ms>, 800.0f<ms>)
                    .Build()

            let replay =
                ReplayBuilder()
                    .KeyDownUntil(0.0f<ms> + head, 800.0f<ms> + tail)
                    .Build()

            let event_processing = ScoringEventCollector(OsuMania.create 8.0f OsuMania.NoMod, 4, replay, notes, 1.0f<rate>)
            event_processing.Update Time.infinity

            let judgement =
                event_processing.Events
                |> Seq.map _.Action
                |> Seq.choose (function Release e -> e.Judgement | _ -> None)
                |> Seq.map fst
                |> Seq.tryExactlyOne

            Assert.AreEqual(Some expected_judgement, judgement)

    [<Test>]
    let OsuRuleset_LnCombinedJudgementBehaviour_11 () =

        let TEST_DATA =
            [
                127.0f<ms>, -164.0f<ms>, 5
                127.0f<ms>, -127.0f<ms>, 4
                127.0f<ms>, -103.0f<ms>, 4
                127.0f<ms>, -73.0f<ms>, 4
                127.0f<ms>, -44.0f<ms>, 4
                127.0f<ms>, -19.0f<ms>, 4
                127.0f<ms>, 19.0f<ms>, 4
                127.0f<ms>, 44.0f<ms>, 4
                127.0f<ms>, 73.0f<ms>, 4
                127.0f<ms>, 103.0f<ms>, 4
                127.0f<ms>, 127.0f<ms>, 4
                127.0f<ms>, 164.0f<ms>, 4
            ]

        for head, tail, expected_judgement in TEST_DATA do

            //printfn "trying head: %.0fms; tail: %.0fms; expecting: %i" head tail expected_judgement

            let notes =
                ChartBuilder(4)
                    .Hold(0.0f<ms>, 800.0f<ms>)
                    .Build()

            let replay =
                ReplayBuilder()
                    .KeyDownUntil(0.0f<ms> + head, 800.0f<ms> + tail)
                    .Build()

            let event_processing = ScoringEventCollector(OsuMania.create 8.0f OsuMania.NoMod, 4, replay, notes, 1.0f<rate>)
            event_processing.Update Time.infinity

            let judgement =
                event_processing.Events
                |> Seq.map _.Action
                |> Seq.choose (function Release e -> e.Judgement | _ -> None)
                |> Seq.map fst
                |> Seq.tryExactlyOne

            Assert.AreEqual(Some expected_judgement, judgement)

    [<Test>]
    let OsuRuleset_LnCombinedJudgementBehaviour_12 () =

        let TEST_DATA =
            [
                164.0f<ms>, -164.0f<ms>, 5
                164.0f<ms>, -127.0f<ms>, 4
                164.0f<ms>, -103.0f<ms>, 4
                164.0f<ms>, -73.0f<ms>, 4
                164.0f<ms>, -44.0f<ms>, 4
                164.0f<ms>, -19.0f<ms>, 4
                164.0f<ms>, 19.0f<ms>, 4
                164.0f<ms>, 44.0f<ms>, 4
                164.0f<ms>, 73.0f<ms>, 4
                164.0f<ms>, 103.0f<ms>, 4
                164.0f<ms>, 127.0f<ms>, 4
                164.0f<ms>, 164.0f<ms>, 4
            ]

        for head, tail, expected_judgement in TEST_DATA do

            //printfn "trying head: %.0fms; tail: %.0fms; expecting: %i" head tail expected_judgement

            let notes =
                ChartBuilder(4)
                    .Hold(0.0f<ms>, 800.0f<ms>)
                    .Build()

            let replay =
                ReplayBuilder()
                    .KeyDownUntil(0.0f<ms> + head, 800.0f<ms> + tail)
                    .Build()

            let event_processing = ScoringEventCollector(OsuMania.create 8.0f OsuMania.NoMod, 4, replay, notes, 1.0f<rate>)
            event_processing.Update Time.infinity

            let judgement =
                event_processing.Events
                |> Seq.map _.Action
                |> Seq.choose (function Release e -> e.Judgement | _ -> None)
                |> Seq.map fst
                |> Seq.tryExactlyOne

            Assert.AreEqual(Some expected_judgement, judgement)